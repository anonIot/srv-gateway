package main

import (
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/ambelovsky/gosf"
	curl "github.com/andelf/go-curl"
	socketio_client "github.com/zhouhui8915/go-socket.io-client"
)

func echo(client *gosf.Client, request *gosf.Request) *gosf.Message {
	return gosf.NewSuccessMessage(request.Message.Text)
}

func init() {
	// Listen on an endpoint
	gosf.Listen("echo", echo)
}

func main() {
	// Start the server using a basic configuration
	// fmt.Println("Socket start port : 9999")
	// gosf.Startup(map[string]interface{}{"port": 9999})

	easy := curl.EasyInit()
	defer easy.Cleanup()

	opts := &socketio_client.Options{
		Transport: "websocket",
		Query:     make(map[string]string),
	}
	opts.Query["user"] = "user"
	opts.Query["pwd"] = "pass"
	uri := "http://localhost:8000"

	// client, err := socketio_client.NewClient(uri, opts)
	client, err := socketio_client.NewClient(uri, opts)
	if err != nil {
		log.Printf("NewClient error:%v\n", err)
		return
	}

	client.On("error", func() {
		log.Printf("on error\n")
	})
	client.On("connection", func() {
		log.Printf("on connect\n")
	})
	client.On("message", func(msg string) {
		log.Printf("on message:%v\n", msg)
	})

	client.On("notice", func(msg string) {
		log.Printf("on message:%v\n", msg)
	})
	client.On("reply", func(msg string) {
		log.Printf("on message:%v\n", msg)
	})

	client.On("disconnection", func() {
		log.Printf("on disconnect\n")
	})

	//reader := bufio.NewReader(os.Stdin)
	//var myMsg string
	myMsg := string("My Client")
	client.Emit("notice", myMsg)
	fmt.Println(myMsg)
	for {

		fmt.Println("OK")
		fmt.Println("Sleeping.")
		// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

		// curl http://localhost:3002/api/v2/indoor/1/4

		for i := 1; i < 2; i++ {

			for j := 1; j < 5; j++ {

				easy.Setopt(curl.OPT_URL, fmt.Sprintf("http://localhost:3002/api/v2/indoor/%v/%v", i, j))

				// make a callback function

				fmt.Println("Round :", i, j)
				fooTest := func(buf []byte, userdata interface{}) bool {

					fmt.Println("Type of variable1:", reflect.TypeOf(buf))
					println("DEBUG: size=>", len(buf))
					println("DEBUG: content=>", string(buf))
					println("DEBUG: userdata=>", userdata)

					if len(buf) > 23 {
						client.Emit("notice", string(buf))
					}

					return true
				}

				easy.Setopt(curl.OPT_WRITEFUNCTION, fooTest)

				if err := easy.Perform(); err != nil {
					fmt.Printf("ERROR: %v\n", err)
				}
				time.Sleep(time.Second * 4)
				// resp, err := http.Get(fmt.Sprintf("http://localhost:3002/api/v2/indoor/%v/%v", i, j))
				// defer resp.Body.Close()
				// fmt.Println(fmt.Sprintf("http://localhost:3002/api/v2/indoor/%v/%v", i, j))

				// if err != nil {
				// 	fmt.Println("no Id")

				// } else {
				// 	fmt.Println(resp.Body)

				// 	client.Emit("notice", myMsg)
				// }

			}

		}

		fmt.Println("Next")

		//client.Emit("device/demo123", "I am from Client")
		time.Sleep(time.Second * 10)
		// data, _, _ := reader.ReadLine()
		// command := string(data)
		// client.Emit("msg", command)
		// log.Printf("send message:%v\n", command)
	}

}
